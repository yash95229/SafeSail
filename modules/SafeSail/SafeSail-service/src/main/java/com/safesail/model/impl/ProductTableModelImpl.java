/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.safesail.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.safesail.model.ProductTable;
import com.safesail.model.ProductTableModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the ProductTable service. Represents a row in the &quot;Safe_Sail_ProductTable&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>ProductTableModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ProductTableImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see ProductTableImpl
 * @generated
 */
@JSON(strict = true)
public class ProductTableModelImpl
	extends BaseModelImpl<ProductTable> implements ProductTableModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a product table model instance should use the <code>ProductTable</code> interface instead.
	 */
	public static final String TABLE_NAME = "Safe_Sail_ProductTable";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"productId", Types.BIGINT},
		{"productName", Types.VARCHAR}, {"premiumDiscount", Types.INTEGER},
		{"totalDiscount", Types.INTEGER}, {"yearPay", Types.BIGINT},
		{"monthPay", Types.BIGINT}, {"totalPremium", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("productId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("productName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("premiumDiscount", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("totalDiscount", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("yearPay", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("monthPay", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("totalPremium", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table Safe_Sail_ProductTable (uuid_ VARCHAR(75) null,productId LONG not null primary key,productName VARCHAR(75) null,premiumDiscount INTEGER,totalDiscount INTEGER,yearPay LONG,monthPay LONG,totalPremium LONG)";

	public static final String TABLE_SQL_DROP =
		"drop table Safe_Sail_ProductTable";

	public static final String ORDER_BY_JPQL =
		" ORDER BY productTable.productId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY Safe_Sail_ProductTable.productId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long PRODUCTID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long PRODUCTNAME_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long UUID_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public ProductTableModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _productId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setProductId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _productId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return ProductTable.class;
	}

	@Override
	public String getModelClassName() {
		return ProductTable.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<ProductTable, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<ProductTable, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<ProductTable, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((ProductTable)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<ProductTable, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<ProductTable, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(ProductTable)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<ProductTable, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<ProductTable, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<ProductTable, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<ProductTable, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<ProductTable, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<ProductTable, Object>>();
		Map<String, BiConsumer<ProductTable, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<ProductTable, ?>>();

		attributeGetterFunctions.put("uuid", ProductTable::getUuid);
		attributeSetterBiConsumers.put(
			"uuid", (BiConsumer<ProductTable, String>)ProductTable::setUuid);
		attributeGetterFunctions.put("productId", ProductTable::getProductId);
		attributeSetterBiConsumers.put(
			"productId",
			(BiConsumer<ProductTable, Long>)ProductTable::setProductId);
		attributeGetterFunctions.put(
			"productName", ProductTable::getProductName);
		attributeSetterBiConsumers.put(
			"productName",
			(BiConsumer<ProductTable, String>)ProductTable::setProductName);
		attributeGetterFunctions.put(
			"premiumDiscount", ProductTable::getPremiumDiscount);
		attributeSetterBiConsumers.put(
			"premiumDiscount",
			(BiConsumer<ProductTable, Integer>)
				ProductTable::setPremiumDiscount);
		attributeGetterFunctions.put(
			"totalDiscount", ProductTable::getTotalDiscount);
		attributeSetterBiConsumers.put(
			"totalDiscount",
			(BiConsumer<ProductTable, Integer>)ProductTable::setTotalDiscount);
		attributeGetterFunctions.put("yearPay", ProductTable::getYearPay);
		attributeSetterBiConsumers.put(
			"yearPay",
			(BiConsumer<ProductTable, Long>)ProductTable::setYearPay);
		attributeGetterFunctions.put("monthPay", ProductTable::getMonthPay);
		attributeSetterBiConsumers.put(
			"monthPay",
			(BiConsumer<ProductTable, Long>)ProductTable::setMonthPay);
		attributeGetterFunctions.put(
			"totalPremium", ProductTable::getTotalPremium);
		attributeSetterBiConsumers.put(
			"totalPremium",
			(BiConsumer<ProductTable, Long>)ProductTable::setTotalPremium);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uuid = uuid;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUuid() {
		return getColumnOriginalValue("uuid_");
	}

	@JSON
	@Override
	public long getProductId() {
		return _productId;
	}

	@Override
	public void setProductId(long productId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_productId = productId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalProductId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("productId"));
	}

	@JSON
	@Override
	public String getProductName() {
		if (_productName == null) {
			return "";
		}
		else {
			return _productName;
		}
	}

	@Override
	public void setProductName(String productName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_productName = productName;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalProductName() {
		return getColumnOriginalValue("productName");
	}

	@JSON
	@Override
	public int getPremiumDiscount() {
		return _premiumDiscount;
	}

	@Override
	public void setPremiumDiscount(int premiumDiscount) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_premiumDiscount = premiumDiscount;
	}

	@JSON
	@Override
	public int getTotalDiscount() {
		return _totalDiscount;
	}

	@Override
	public void setTotalDiscount(int totalDiscount) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_totalDiscount = totalDiscount;
	}

	@JSON
	@Override
	public long getYearPay() {
		return _yearPay;
	}

	@Override
	public void setYearPay(long yearPay) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_yearPay = yearPay;
	}

	@JSON
	@Override
	public long getMonthPay() {
		return _monthPay;
	}

	@Override
	public void setMonthPay(long monthPay) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_monthPay = monthPay;
	}

	@JSON
	@Override
	public long getTotalPremium() {
		return _totalPremium;
	}

	@Override
	public void setTotalPremium(long totalPremium) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_totalPremium = totalPremium;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, ProductTable.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public ProductTable toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, ProductTable>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ProductTableImpl productTableImpl = new ProductTableImpl();

		productTableImpl.setUuid(getUuid());
		productTableImpl.setProductId(getProductId());
		productTableImpl.setProductName(getProductName());
		productTableImpl.setPremiumDiscount(getPremiumDiscount());
		productTableImpl.setTotalDiscount(getTotalDiscount());
		productTableImpl.setYearPay(getYearPay());
		productTableImpl.setMonthPay(getMonthPay());
		productTableImpl.setTotalPremium(getTotalPremium());

		productTableImpl.resetOriginalValues();

		return productTableImpl;
	}

	@Override
	public ProductTable cloneWithOriginalValues() {
		ProductTableImpl productTableImpl = new ProductTableImpl();

		productTableImpl.setUuid(this.<String>getColumnOriginalValue("uuid_"));
		productTableImpl.setProductId(
			this.<Long>getColumnOriginalValue("productId"));
		productTableImpl.setProductName(
			this.<String>getColumnOriginalValue("productName"));
		productTableImpl.setPremiumDiscount(
			this.<Integer>getColumnOriginalValue("premiumDiscount"));
		productTableImpl.setTotalDiscount(
			this.<Integer>getColumnOriginalValue("totalDiscount"));
		productTableImpl.setYearPay(
			this.<Long>getColumnOriginalValue("yearPay"));
		productTableImpl.setMonthPay(
			this.<Long>getColumnOriginalValue("monthPay"));
		productTableImpl.setTotalPremium(
			this.<Long>getColumnOriginalValue("totalPremium"));

		return productTableImpl;
	}

	@Override
	public int compareTo(ProductTable productTable) {
		long primaryKey = productTable.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof ProductTable)) {
			return false;
		}

		ProductTable productTable = (ProductTable)object;

		long primaryKey = productTable.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<ProductTable> toCacheModel() {
		ProductTableCacheModel productTableCacheModel =
			new ProductTableCacheModel();

		productTableCacheModel.uuid = getUuid();

		String uuid = productTableCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			productTableCacheModel.uuid = null;
		}

		productTableCacheModel.productId = getProductId();

		productTableCacheModel.productName = getProductName();

		String productName = productTableCacheModel.productName;

		if ((productName != null) && (productName.length() == 0)) {
			productTableCacheModel.productName = null;
		}

		productTableCacheModel.premiumDiscount = getPremiumDiscount();

		productTableCacheModel.totalDiscount = getTotalDiscount();

		productTableCacheModel.yearPay = getYearPay();

		productTableCacheModel.monthPay = getMonthPay();

		productTableCacheModel.totalPremium = getTotalPremium();

		return productTableCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<ProductTable, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<ProductTable, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<ProductTable, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((ProductTable)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, ProductTable>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					ProductTable.class, ModelWrapper.class);

	}

	private String _uuid;
	private long _productId;
	private String _productName;
	private int _premiumDiscount;
	private int _totalDiscount;
	private long _yearPay;
	private long _monthPay;
	private long _totalPremium;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<ProductTable, Object> function = _attributeGetterFunctions.get(
			columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((ProductTable)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("uuid_", _uuid);
		_columnOriginalValues.put("productId", _productId);
		_columnOriginalValues.put("productName", _productName);
		_columnOriginalValues.put("premiumDiscount", _premiumDiscount);
		_columnOriginalValues.put("totalDiscount", _totalDiscount);
		_columnOriginalValues.put("yearPay", _yearPay);
		_columnOriginalValues.put("monthPay", _monthPay);
		_columnOriginalValues.put("totalPremium", _totalPremium);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("uuid_", "uuid");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("uuid_", 1L);

		columnBitmasks.put("productId", 2L);

		columnBitmasks.put("productName", 4L);

		columnBitmasks.put("premiumDiscount", 8L);

		columnBitmasks.put("totalDiscount", 16L);

		columnBitmasks.put("yearPay", 32L);

		columnBitmasks.put("monthPay", 64L);

		columnBitmasks.put("totalPremium", 128L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private ProductTable _escapedModel;

}