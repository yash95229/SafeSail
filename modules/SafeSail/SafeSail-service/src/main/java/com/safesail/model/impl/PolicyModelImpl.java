/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.safesail.model.impl;

import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.safesail.model.Policy;
import com.safesail.model.PolicyModel;
import com.safesail.service.persistence.PolicyPK;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the Policy service. Represents a row in the &quot;Safe_Sail_Policy&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>PolicyModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link PolicyImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see PolicyImpl
 * @generated
 */
@JSON(strict = true)
public class PolicyModelImpl
	extends BaseModelImpl<Policy> implements PolicyModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a policy model instance should use the <code>Policy</code> interface instead.
	 */
	public static final String TABLE_NAME = "Safe_Sail_Policy";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"bookingId", Types.BIGINT},
		{"applicationNumber", Types.BIGINT}, {"userId", Types.BIGINT},
		{"fullName", Types.VARCHAR}, {"planName", Types.VARCHAR},
		{"annualIncome", Types.VARCHAR}, {"bookingDate", Types.TIMESTAMP},
		{"sumAssured", Types.BIGINT}, {"policyTerm", Types.INTEGER},
		{"maturityDate", Types.TIMESTAMP}, {"paymentFrequency", Types.VARCHAR},
		{"totalPremium", Types.BIGINT}, {"totalAddon", Types.BIGINT},
		{"status", Types.INTEGER}, {"quoteId", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("bookingId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("applicationNumber", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("fullName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("planName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("annualIncome", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("bookingDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("sumAssured", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("policyTerm", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("maturityDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("paymentFrequency", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("totalPremium", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("totalAddon", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("status", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("quoteId", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table Safe_Sail_Policy (uuid_ VARCHAR(75) null,bookingId LONG not null,applicationNumber LONG not null,userId LONG,fullName VARCHAR(75) null,planName VARCHAR(75) null,annualIncome VARCHAR(75) null,bookingDate DATE null,sumAssured LONG,policyTerm INTEGER,maturityDate DATE null,paymentFrequency VARCHAR(75) null,totalPremium LONG,totalAddon LONG,status INTEGER,quoteId VARCHAR(75) not null,primary key (bookingId, applicationNumber, quoteId))";

	public static final String TABLE_SQL_DROP = "drop table Safe_Sail_Policy";

	public static final String ORDER_BY_JPQL =
		" ORDER BY policy.id.bookingId ASC, policy.id.applicationNumber ASC, policy.id.quoteId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY Safe_Sail_Policy.bookingId ASC, Safe_Sail_Policy.applicationNumber ASC, Safe_Sail_Policy.quoteId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long APPLICATIONNUMBER_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long QUOTEID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long USERID_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long UUID_COLUMN_BITMASK = 8L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long BOOKINGID_COLUMN_BITMASK = 16L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public PolicyModelImpl() {
	}

	@Override
	public PolicyPK getPrimaryKey() {
		return new PolicyPK(_bookingId, _applicationNumber, _quoteId);
	}

	@Override
	public void setPrimaryKey(PolicyPK primaryKey) {
		setBookingId(primaryKey.bookingId);
		setApplicationNumber(primaryKey.applicationNumber);
		setQuoteId(primaryKey.quoteId);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return new PolicyPK(_bookingId, _applicationNumber, _quoteId);
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey((PolicyPK)primaryKeyObj);
	}

	@Override
	public Class<?> getModelClass() {
		return Policy.class;
	}

	@Override
	public String getModelClassName() {
		return Policy.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Policy, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Policy, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Policy, Object> attributeGetterFunction = entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((Policy)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Policy, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Policy, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(Policy)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Policy, Object>> getAttributeGetterFunctions() {
		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Policy, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<Policy, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<Policy, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<Policy, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<Policy, Object>>();
		Map<String, BiConsumer<Policy, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<Policy, ?>>();

		attributeGetterFunctions.put("uuid", Policy::getUuid);
		attributeSetterBiConsumers.put(
			"uuid", (BiConsumer<Policy, String>)Policy::setUuid);
		attributeGetterFunctions.put("bookingId", Policy::getBookingId);
		attributeSetterBiConsumers.put(
			"bookingId", (BiConsumer<Policy, Long>)Policy::setBookingId);
		attributeGetterFunctions.put(
			"applicationNumber", Policy::getApplicationNumber);
		attributeSetterBiConsumers.put(
			"applicationNumber",
			(BiConsumer<Policy, Long>)Policy::setApplicationNumber);
		attributeGetterFunctions.put("userId", Policy::getUserId);
		attributeSetterBiConsumers.put(
			"userId", (BiConsumer<Policy, Long>)Policy::setUserId);
		attributeGetterFunctions.put("fullName", Policy::getFullName);
		attributeSetterBiConsumers.put(
			"fullName", (BiConsumer<Policy, String>)Policy::setFullName);
		attributeGetterFunctions.put("planName", Policy::getPlanName);
		attributeSetterBiConsumers.put(
			"planName", (BiConsumer<Policy, String>)Policy::setPlanName);
		attributeGetterFunctions.put("annualIncome", Policy::getAnnualIncome);
		attributeSetterBiConsumers.put(
			"annualIncome",
			(BiConsumer<Policy, String>)Policy::setAnnualIncome);
		attributeGetterFunctions.put("bookingDate", Policy::getBookingDate);
		attributeSetterBiConsumers.put(
			"bookingDate", (BiConsumer<Policy, Date>)Policy::setBookingDate);
		attributeGetterFunctions.put("sumAssured", Policy::getSumAssured);
		attributeSetterBiConsumers.put(
			"sumAssured", (BiConsumer<Policy, Long>)Policy::setSumAssured);
		attributeGetterFunctions.put("policyTerm", Policy::getPolicyTerm);
		attributeSetterBiConsumers.put(
			"policyTerm", (BiConsumer<Policy, Integer>)Policy::setPolicyTerm);
		attributeGetterFunctions.put("maturityDate", Policy::getMaturityDate);
		attributeSetterBiConsumers.put(
			"maturityDate", (BiConsumer<Policy, Date>)Policy::setMaturityDate);
		attributeGetterFunctions.put(
			"paymentFrequency", Policy::getPaymentFrequency);
		attributeSetterBiConsumers.put(
			"paymentFrequency",
			(BiConsumer<Policy, String>)Policy::setPaymentFrequency);
		attributeGetterFunctions.put("totalPremium", Policy::getTotalPremium);
		attributeSetterBiConsumers.put(
			"totalPremium", (BiConsumer<Policy, Long>)Policy::setTotalPremium);
		attributeGetterFunctions.put("totalAddon", Policy::getTotalAddon);
		attributeSetterBiConsumers.put(
			"totalAddon", (BiConsumer<Policy, Long>)Policy::setTotalAddon);
		attributeGetterFunctions.put("status", Policy::getStatus);
		attributeSetterBiConsumers.put(
			"status", (BiConsumer<Policy, Integer>)Policy::setStatus);
		attributeGetterFunctions.put("quoteId", Policy::getQuoteId);
		attributeSetterBiConsumers.put(
			"quoteId", (BiConsumer<Policy, String>)Policy::setQuoteId);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uuid = uuid;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUuid() {
		return getColumnOriginalValue("uuid_");
	}

	@JSON
	@Override
	public long getBookingId() {
		return _bookingId;
	}

	@Override
	public void setBookingId(long bookingId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_bookingId = bookingId;
	}

	@JSON
	@Override
	public long getApplicationNumber() {
		return _applicationNumber;
	}

	@Override
	public void setApplicationNumber(long applicationNumber) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_applicationNumber = applicationNumber;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalApplicationNumber() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("applicationNumber"));
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalUserId() {
		return GetterUtil.getLong(this.<Long>getColumnOriginalValue("userId"));
	}

	@JSON
	@Override
	public String getFullName() {
		if (_fullName == null) {
			return "";
		}
		else {
			return _fullName;
		}
	}

	@Override
	public void setFullName(String fullName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_fullName = fullName;
	}

	@JSON
	@Override
	public String getPlanName() {
		if (_planName == null) {
			return "";
		}
		else {
			return _planName;
		}
	}

	@Override
	public void setPlanName(String planName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_planName = planName;
	}

	@JSON
	@Override
	public String getAnnualIncome() {
		if (_annualIncome == null) {
			return "";
		}
		else {
			return _annualIncome;
		}
	}

	@Override
	public void setAnnualIncome(String annualIncome) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_annualIncome = annualIncome;
	}

	@JSON
	@Override
	public Date getBookingDate() {
		return _bookingDate;
	}

	@Override
	public void setBookingDate(Date bookingDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_bookingDate = bookingDate;
	}

	@JSON
	@Override
	public long getSumAssured() {
		return _sumAssured;
	}

	@Override
	public void setSumAssured(long sumAssured) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_sumAssured = sumAssured;
	}

	@JSON
	@Override
	public int getPolicyTerm() {
		return _policyTerm;
	}

	@Override
	public void setPolicyTerm(int policyTerm) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_policyTerm = policyTerm;
	}

	@JSON
	@Override
	public Date getMaturityDate() {
		return _maturityDate;
	}

	@Override
	public void setMaturityDate(Date maturityDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_maturityDate = maturityDate;
	}

	@JSON
	@Override
	public String getPaymentFrequency() {
		if (_paymentFrequency == null) {
			return "";
		}
		else {
			return _paymentFrequency;
		}
	}

	@Override
	public void setPaymentFrequency(String paymentFrequency) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_paymentFrequency = paymentFrequency;
	}

	@JSON
	@Override
	public long getTotalPremium() {
		return _totalPremium;
	}

	@Override
	public void setTotalPremium(long totalPremium) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_totalPremium = totalPremium;
	}

	@JSON
	@Override
	public long getTotalAddon() {
		return _totalAddon;
	}

	@Override
	public void setTotalAddon(long totalAddon) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_totalAddon = totalAddon;
	}

	@JSON
	@Override
	public int getStatus() {
		return _status;
	}

	@Override
	public void setStatus(int status) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_status = status;
	}

	@JSON
	@Override
	public String getQuoteId() {
		if (_quoteId == null) {
			return "";
		}
		else {
			return _quoteId;
		}
	}

	@Override
	public void setQuoteId(String quoteId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_quoteId = quoteId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalQuoteId() {
		return getColumnOriginalValue("quoteId");
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public Policy toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, Policy>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		PolicyImpl policyImpl = new PolicyImpl();

		policyImpl.setUuid(getUuid());
		policyImpl.setBookingId(getBookingId());
		policyImpl.setApplicationNumber(getApplicationNumber());
		policyImpl.setUserId(getUserId());
		policyImpl.setFullName(getFullName());
		policyImpl.setPlanName(getPlanName());
		policyImpl.setAnnualIncome(getAnnualIncome());
		policyImpl.setBookingDate(getBookingDate());
		policyImpl.setSumAssured(getSumAssured());
		policyImpl.setPolicyTerm(getPolicyTerm());
		policyImpl.setMaturityDate(getMaturityDate());
		policyImpl.setPaymentFrequency(getPaymentFrequency());
		policyImpl.setTotalPremium(getTotalPremium());
		policyImpl.setTotalAddon(getTotalAddon());
		policyImpl.setStatus(getStatus());
		policyImpl.setQuoteId(getQuoteId());

		policyImpl.resetOriginalValues();

		return policyImpl;
	}

	@Override
	public Policy cloneWithOriginalValues() {
		PolicyImpl policyImpl = new PolicyImpl();

		policyImpl.setUuid(this.<String>getColumnOriginalValue("uuid_"));
		policyImpl.setBookingId(this.<Long>getColumnOriginalValue("bookingId"));
		policyImpl.setApplicationNumber(
			this.<Long>getColumnOriginalValue("applicationNumber"));
		policyImpl.setUserId(this.<Long>getColumnOriginalValue("userId"));
		policyImpl.setFullName(this.<String>getColumnOriginalValue("fullName"));
		policyImpl.setPlanName(this.<String>getColumnOriginalValue("planName"));
		policyImpl.setAnnualIncome(
			this.<String>getColumnOriginalValue("annualIncome"));
		policyImpl.setBookingDate(
			this.<Date>getColumnOriginalValue("bookingDate"));
		policyImpl.setSumAssured(
			this.<Long>getColumnOriginalValue("sumAssured"));
		policyImpl.setPolicyTerm(
			this.<Integer>getColumnOriginalValue("policyTerm"));
		policyImpl.setMaturityDate(
			this.<Date>getColumnOriginalValue("maturityDate"));
		policyImpl.setPaymentFrequency(
			this.<String>getColumnOriginalValue("paymentFrequency"));
		policyImpl.setTotalPremium(
			this.<Long>getColumnOriginalValue("totalPremium"));
		policyImpl.setTotalAddon(
			this.<Long>getColumnOriginalValue("totalAddon"));
		policyImpl.setStatus(this.<Integer>getColumnOriginalValue("status"));
		policyImpl.setQuoteId(this.<String>getColumnOriginalValue("quoteId"));

		return policyImpl;
	}

	@Override
	public int compareTo(Policy policy) {
		PolicyPK primaryKey = policy.getPrimaryKey();

		return getPrimaryKey().compareTo(primaryKey);
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof Policy)) {
			return false;
		}

		Policy policy = (Policy)object;

		PolicyPK primaryKey = policy.getPrimaryKey();

		if (getPrimaryKey().equals(primaryKey)) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey().hashCode();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<Policy> toCacheModel() {
		PolicyCacheModel policyCacheModel = new PolicyCacheModel();

		policyCacheModel.policyPK = getPrimaryKey();

		policyCacheModel.uuid = getUuid();

		String uuid = policyCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			policyCacheModel.uuid = null;
		}

		policyCacheModel.bookingId = getBookingId();

		policyCacheModel.applicationNumber = getApplicationNumber();

		policyCacheModel.userId = getUserId();

		policyCacheModel.fullName = getFullName();

		String fullName = policyCacheModel.fullName;

		if ((fullName != null) && (fullName.length() == 0)) {
			policyCacheModel.fullName = null;
		}

		policyCacheModel.planName = getPlanName();

		String planName = policyCacheModel.planName;

		if ((planName != null) && (planName.length() == 0)) {
			policyCacheModel.planName = null;
		}

		policyCacheModel.annualIncome = getAnnualIncome();

		String annualIncome = policyCacheModel.annualIncome;

		if ((annualIncome != null) && (annualIncome.length() == 0)) {
			policyCacheModel.annualIncome = null;
		}

		Date bookingDate = getBookingDate();

		if (bookingDate != null) {
			policyCacheModel.bookingDate = bookingDate.getTime();
		}
		else {
			policyCacheModel.bookingDate = Long.MIN_VALUE;
		}

		policyCacheModel.sumAssured = getSumAssured();

		policyCacheModel.policyTerm = getPolicyTerm();

		Date maturityDate = getMaturityDate();

		if (maturityDate != null) {
			policyCacheModel.maturityDate = maturityDate.getTime();
		}
		else {
			policyCacheModel.maturityDate = Long.MIN_VALUE;
		}

		policyCacheModel.paymentFrequency = getPaymentFrequency();

		String paymentFrequency = policyCacheModel.paymentFrequency;

		if ((paymentFrequency != null) && (paymentFrequency.length() == 0)) {
			policyCacheModel.paymentFrequency = null;
		}

		policyCacheModel.totalPremium = getTotalPremium();

		policyCacheModel.totalAddon = getTotalAddon();

		policyCacheModel.status = getStatus();

		policyCacheModel.quoteId = getQuoteId();

		String quoteId = policyCacheModel.quoteId;

		if ((quoteId != null) && (quoteId.length() == 0)) {
			policyCacheModel.quoteId = null;
		}

		return policyCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Policy, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Policy, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Policy, Object> attributeGetterFunction = entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((Policy)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, Policy>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					Policy.class, ModelWrapper.class);

	}

	private String _uuid;
	private long _bookingId;
	private long _applicationNumber;
	private long _userId;
	private String _fullName;
	private String _planName;
	private String _annualIncome;
	private Date _bookingDate;
	private long _sumAssured;
	private int _policyTerm;
	private Date _maturityDate;
	private String _paymentFrequency;
	private long _totalPremium;
	private long _totalAddon;
	private int _status;
	private String _quoteId;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<Policy, Object> function = _attributeGetterFunctions.get(
			columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((Policy)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("uuid_", _uuid);
		_columnOriginalValues.put("bookingId", _bookingId);
		_columnOriginalValues.put("applicationNumber", _applicationNumber);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("fullName", _fullName);
		_columnOriginalValues.put("planName", _planName);
		_columnOriginalValues.put("annualIncome", _annualIncome);
		_columnOriginalValues.put("bookingDate", _bookingDate);
		_columnOriginalValues.put("sumAssured", _sumAssured);
		_columnOriginalValues.put("policyTerm", _policyTerm);
		_columnOriginalValues.put("maturityDate", _maturityDate);
		_columnOriginalValues.put("paymentFrequency", _paymentFrequency);
		_columnOriginalValues.put("totalPremium", _totalPremium);
		_columnOriginalValues.put("totalAddon", _totalAddon);
		_columnOriginalValues.put("status", _status);
		_columnOriginalValues.put("quoteId", _quoteId);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("uuid_", "uuid");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("uuid_", 1L);

		columnBitmasks.put("bookingId", 2L);

		columnBitmasks.put("applicationNumber", 4L);

		columnBitmasks.put("userId", 8L);

		columnBitmasks.put("fullName", 16L);

		columnBitmasks.put("planName", 32L);

		columnBitmasks.put("annualIncome", 64L);

		columnBitmasks.put("bookingDate", 128L);

		columnBitmasks.put("sumAssured", 256L);

		columnBitmasks.put("policyTerm", 512L);

		columnBitmasks.put("maturityDate", 1024L);

		columnBitmasks.put("paymentFrequency", 2048L);

		columnBitmasks.put("totalPremium", 4096L);

		columnBitmasks.put("totalAddon", 8192L);

		columnBitmasks.put("status", 16384L);

		columnBitmasks.put("quoteId", 32768L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private Policy _escapedModel;

}